package com.ashomapp.presentation.profileimport android.animation.ObjectAnimatorimport android.app.AlertDialogimport android.graphics.Colorimport android.graphics.LinearGradientimport android.os.Bundleimport android.os.Handlerimport android.text.SpannableStringimport android.text.Spannedimport android.text.style.ForegroundColorSpanimport android.util.Logimport androidx.fragment.app.Fragmentimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport androidx.activity.OnBackPressedCallbackimport androidx.core.animation.doOnEndimport androidx.lifecycle.lifecycleScopeimport androidx.navigation.fragment.findNavControllerimport com.ashomapp.AshomAppApplicationimport com.ashomapp.MainActivityimport com.ashomapp.Rimport com.ashomapp.databinding.FragmentChangePasswordBindingimport com.ashomapp.network.retrofit.ResultWrapperimport com.ashomapp.presentation.home.HomeFlowimport com.ashomapp.utils.*import com.dbvertex.myashomapp.network.repository.HomeRepositoryimport com.github.razir.progressbutton.bindProgressButtonimport com.github.razir.progressbutton.hideProgressimport com.github.razir.progressbutton.showProgressimport kotlinx.coroutines.launchclass ChangePassword : Fragment() {    private lateinit var mBinding: FragmentChangePasswordBinding    override fun onCreateView(        inflater: LayoutInflater, container: ViewGroup?,        savedInstanceState: Bundle?    ): View {        mBinding = FragmentChangePasswordBinding.inflate(layoutInflater, container, false)        return mBinding.root    }    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {        bindProgressButton(mBinding.loginSubmit)        mBinding.mtoolbar.toolProfile.visibility = View.INVISIBLE        notificationcounter.observe(this.viewLifecycleOwner) {            if (it != 0) {                mBinding.mtoolbar.iconBadges.text = it.toString()                mBinding.mtoolbar.iconBadges.visibility = View.VISIBLE            } else {                mBinding.mtoolbar.iconBadges.visibility = View.GONE            }        }        if (HomeFlow.sectionBottomID == R.id.homeFrag){            HomeFlow.home_settingcurrentID = R.id.changePassword        }else if (HomeFlow.sectionBottomID == R.id.countryList){            HomeFlow.financial_settingCurrentID = R.id.changePassword        }else if (HomeFlow.sectionBottomID == R.id.forumFrag){            HomeFlow.forum_settingcurrentID = R.id.changePassword        }else if (HomeFlow.sectionBottomID == R.id.newsFrag){            HomeFlow.news_settingcurrentID = R.id.changePassword        }else if (HomeFlow.sectionBottomID == R.id.searchFrag){            HomeFlow.search_settingcurrentID = R.id.changePassword        }        mBinding.mtoolbar.mainBack.setOnClickListener {            ObjectAnimator.ofFloat(mBinding.mtoolbar.mainBackView, "alpha", 0f, 1f, 0f)                .apply {                    duration = 100                    start()                    doOnEnd {                        findNavController().navigate(R.id.settingFrag)                    }                }        }        val onBackPressedCallback = object : OnBackPressedCallback(true) {            override fun handleOnBackPressed() {                findNavController().navigate(R.id.settingFrag)            }        }        requireActivity().onBackPressedDispatcher.addCallback(            this.viewLifecycleOwner,            onBackPressedCallback        )        mBinding.mtoolbar.icon.setOnClickListener {            setanimation(it)            if (HomeFlow.sectionBottomID == R.id.searchFrag && HomeFlow.searchcurrentFragID != R.id.searchFrag                || HomeFlow.search_to_profile || HomeFlow.search_to_notification) {                HomeFlow.search_to_profile = false                HomeFlow.search_to_notification = false                (requireActivity() as MainActivity).clicktoSearchFrag()            } else if (HomeFlow.sectionBottomID == R.id.countryList && HomeFlow.financialcurrentFragID != R.id.countryList                || HomeFlow.financial_to_profile || HomeFlow.countrylist_to_notification) {                HomeFlow.financial_to_profile = false                HomeFlow.countrylist_to_notification = false                (requireActivity() as MainActivity).clicktoCountryList()            } else if (HomeFlow.sectionBottomID == R.id.forumFrag && HomeFlow.forumCurrentID != R.id.forumFrag                || HomeFlow.forum_to_profile || HomeFlow.fourm_to_notification) {                HomeFlow.forum_to_profile = false                HomeFlow.fourm_to_notification = false                (requireActivity() as MainActivity).clicktoForumTab()            } else if (HomeFlow.sectionBottomID == R.id.newsFrag && HomeFlow.newsFragCurrentID != R.id.newsFrag                || HomeFlow.news_to_profile || HomeFlow.news_to_notification) {                HomeFlow.news_to_profile = false                HomeFlow.news_to_notification = false                (requireActivity() as MainActivity).gotoNewsTab()            } else {                HomeFlow.home_to_profile = false                HomeFlow.hometonotification = false                (requireActivity() as MainActivity).gotoHome()            }        }        mBinding.mtoolbar.notificationBellIcon.setOnClickListener {            hideKeyboard(AshomAppApplication.instance.applicationContext, it)            findNavController().navigate(R.id.notificationFrag)        }        mBinding.loginSubmit.setOnClickListener {            val oldpass = mBinding.oldPassword.text.toString().trim()            val newpass = mBinding.newPassword.text.toString().trim()            val confirpass = mBinding.confirmPassword.text.toString().trim()            if (oldpass.isNullOrEmpty()) {                mBinding.oldPassword.setError("Enter  old password")            } else if (newpass.isNullOrEmpty()) {                mBinding.newPassword.setError("Enter  new password")            } else if (confirpass.isNullOrEmpty() || !confirpass.equals(newpass)) {                mBinding.confirmPassword.setError("Enter  confirm password")            } else {                hideKeyboard(AshomAppApplication.instance.applicationContext, it)                changepassprocess(oldpass, newpass, confirpass)            }        }    }    private fun changepassprocess(oldpass: String, newpass: String, confirpass: String) {        mBinding.loginSubmit.apply {            showProgress()            isClickable = false        }        lifecycleScope.launch {            val result = HomeRepository.changePassword(oldpass, newpass, confirpass)            when (result) {                is ResultWrapper.Success -> {                    if (result.response.status) {                        successDialog(                            requireActivity(),                            "Success",                            "Password has been successfully changed."                        )                        mBinding.loginSubmit.apply {                            hideProgress("UPDATE")                            isClickable = true                        }                    } else {                        temp_showToast("Check password !.")                        mBinding.loginSubmit.apply {                            hideProgress("RETRY")                            isClickable = true                        }                    }                }                is ResultWrapper.Failure -> {                    Log.d("Error", result.errorMessage)                    temp_showToast("Something went wrong")                    mBinding.loginSubmit.apply {                        hideProgress("RETRY")                        isClickable = true                    }                }            }        }    }}